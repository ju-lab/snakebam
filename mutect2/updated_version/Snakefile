# Snakefile to run Mutect2 with basic filters
# 2018.06.07 Jongsoo Yoon
import pysam 

def sampleNameBam(bamFile):
    """get @RG SM: information as sample name from BAM header"""
    bam = pysam.AlignmentFile(bamFile)
    name = bam.header['RG'][0]['SM']
    return name


configfile: 'pathConfig.yaml'
configfile: 'sampleConfig.yaml'

rule all:
    input:
        'done'
rule mutect2_normalcall:
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        ref = config['reference'], 
        normal_bam = lambda wildcards: config['samples'][wildcards.sample]['normal_bam']
    output:
        normal_vcf = 'normal_vcfs/{sample}.normal.vcf.gz',
    params:
        samplename = '{sample}'
    threads: 1
    resources: mem_mb = 4000
    log: 
        'logs/{sample}.mutect2_normalcall.log'
    run:
        normal_name = sampleNameBam(input.normal_bam)
        shell('({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk4} Mutect2 -R {input.ref} \
            -I {input.normal_bam} \
            -tumor {normal_name}\
            --disable-read-filter MateOnSameContigOrNoMappedMateReadFilter \
            -O normal_vcfs/{params.samplename}.normal.vcf.gz) \
        &> {log}')

rule mutect2_pon:
    input: 
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        normal_vcfs = expand('normal_vcfs/{sample}.normal.vcf.gz', sample=config['samples'])
    output:
        pon = 'data_processing/mutect2/pon/pon.vcf.gz'
    threads: 1
    resources: mem_mb = 4000
    log:
        'logs/mutect2_pon.log'
    run:
        input_string = ['-v' + vcf for vcf in input.normal_vcfs]
        input_string = " ".join(input_string)
        shell('({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk4} CreateSomaticPanelOfNormals {input_string} \
            -O {output.pon}) &> {log}')


rule mutect2_call: 
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'],
        ref = config['reference'], 
        pon = 'data_processing/mutect2/pon/pon.vcf.gz', 
        normal_bam = lambda wildcards: config['samples'][wildcards.sample]['normal_bam'],
        tumor_bam = lambda wildcards: config['samples'][wildcards.sample]['tumor_bam'],
        af_only_gnomad = config['af_only_gnomad']

    output:
        vcf = 'data_processing/mutect2/initial_callset/{sample}.mutect2.vcf.gz', 
        bamout = 'data_processing/mutect2/initial_callset/{sample}.mutect2.bam'
    threads: 1
    resources: mem_mb = 4000
    log:
        'logs/{sample}.mutect2_call.log'
    run:
        tumor_name = sampleNameBam(input.tumor_bam)
        normal_name = sampleNameBam(input.normal_bam)

        shell('({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk} --java-options "-Xmx2g" Mutect2 \
            -R {input.ref} \
            -I {input.tumor_bam} \
            -I {input.normal_bam} \
            -tumor {tumor_name} \
            -normal {normal_name} \
            -pon {input.pon}\
            --germline-resource {input.af_only_gnomad} \
            --af-of-alleles-not-in-resource 0.0000025 \
            --disable-read-filter MateOnSameContigOrNoMappedMateReadFilter \
            -O {output.vcf} \
            -bamout {output.bamout}) &> {log}')

rule contam_estimate:
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        common_biallelic_variants = config['common_biallelic_variants'], 
        tumor_bam = lambda wildcards: config['samples'][wildcards.sample]['tumor_bam']
    output:
        pileupsummarytable = "data_processing/mutect2/contam/{sample}.pileupsummary.table", 
        contaminationtable = "data_processing/mutect2/contam/{sample}.contamination.table"

    threads:1
    resources: mem_mb = 4000
    log:
        'logs/{sample}.contam_estimate.log'
    shell:
        "({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk4} GetPileupSummaries "
        "-I {input.tumor_bam} "
        "-V {input.common_biallelic_variants} "
        "-O {output.pileupsummarytable};"
        "{input.java8} {input.gatk4} CalculateContamination "
        "-I {output.pileupsummarytable} -O {output.contaminationtable}) &> {log}"

rule contam_filter_mutectcalls:
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        initial_callset = 'data_processing/mutect2/initial_callset/{sample}.mutect2.vcf.gz', 
        contaminationtable = "data_processing/mutect2/contam/{sample}.contamination.table"
    output:
        contam_filtered_vcf = 'data_processing/mutect2/contam_filter/{sample}.mutect2.f1.vcf.gz'
    threads: 1
    resources: mem_mb = 4000
    log:
        'logs/{sample}.contam_filter_mutectcalls.log'
    shell:
        "({input.java8} -jar Xmx{resources.mem_mb}m {input.gatk4} FilterMutectCalls "
        "-V {input.initial_callset} "
        "--contamination-table {input.contaminationtable} " 
        "-O {output.contam_filtered_vcf}) &> {log}"

rule artifact_metric:
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        ref = config['reference'],
        tumor_bam = lambda wildcards: config['samples'][wildcards.sample]['tumor_bam'], 

    output:
        artifact_metric = 'data_processing/mutect2/artifact_filter/{sample}.pre_adapter_detail_metrics.txt', 
    threads: 1
    resources: mem_mb = 4000
    log:
        'logs/{sample}.artifact_metric.log'
    shell:
        "({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk4} "
        "CollectSequencingArtifactMetrics "
        "-I {input.tumor_bam} "
        "-O data_processing/mutect2/artifact_filter/{wildcards.sample} "
        "--FILE_EXTENSION '.txt' "
        "-R {input.ref}) &> {log} "

rule artifact_filter_mutectcalls:
    input:
        java8 = config['java8'], 
        gatk4 = config['gatk4'], 
        artifact_metric = 'data_processing/mutect2/artifact_filter/{sample}.pre_adapter_detail_metrics.txt', 
        contam_filtered_vcf = 'data_processing/mutect2/contam_filter/{sample}.mutect2.f1.vcf.gz'
    output:    
        artifact_filtered_vcf = 'data_processing/mutect2/final/{sample}.mutect2.final.vcf.gz'
    resources: mem_mb = 4000
    log:
        'log/{sample}.artifact_filter_mutectcalls.log'
    shell:
        "({input.java8} -jar -Xmx{resources.mem_mb}m {input.gatk4}  " 
        " FilterByOrientationBias " 
        "-A G/T "
        "-A C/T "
        "-V {input.contam_filtered_vcf} "
        "-P {input.artifact_metric} "
        "-O {output.artifact_filtered_vcf}) &> {log}"

rule combine:
        input:
            outfiles = expand('data_processing/mutect2/final/{sample}.mutect2.final.vcf.gz', sample=config['samples'])
             # outfiles=expand('normal_vcfs/{sample}.normal.vcf.gz', sample=config['samples'])
        #    outfiles=expand("data_processing/mutect2/{sample}.mutect2.vcf.gz", sample=config["samples"])
        output:
            "done"
        shell:
            "touch {output}"

